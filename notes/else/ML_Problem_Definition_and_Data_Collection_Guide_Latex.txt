\documentclass[12pt]{article}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage[utf8]{inputenc}

\title{Consolidated Machine Learning Problem Definition and Data Collection Guide}
\author{Author Name}
\date{\today}

\begin{document}

\maketitle

\section{Objective}
Develop a model, \( M \), that infers the content, \( C \), of user conversations with Alexa, \( A \), from WiFi traffic data, \( W \), collected by Raspberry Pi, \( R \). The intent is to define a function such that \( M(W) \mapsto C \).

\section{Problem Type}
Inference: Determine \( C \) from patterns in \( W \).

\section{Data Sources}
WiFi Traffic Data, \( W \): Represented by variables such as bandwidth usage (\( B_w \)), data transfer rates (\( D_r \)), device connections (\( D_c \)), connection durations (\( C_d \)), and activity timestamps (\( A_t \)).\\
User Interaction Data, \( U \): Transcribed interactions (\( T_i \)) categorized for validation.\\
Conversation Content Data, \( C \): Full audio recordings of user conversations with Alexa, captured using an audio recording device for detailed content analysis.

\section{Data Preprocessing Needs}
Traffic Data (\( W \)): Apply pattern recognition (\( P_r \)), time series analysis (\( T_s \)), and feature extraction (\( F_e \)).\\
Interaction Data (\( U \)): Utilize NLP for theme extraction (\( T_e \)).\\
Conversation Content Data (\( C \)): Audio transcription and thematic categorization for detailed content analysis.

\section{Feature Engineering}
Construct features (\( F \)) linking \( W \) with \( C \).

\section{Model Selection}
Consider models employing advanced pattern recognition (\( P_r \)) and neural networks (\( NN \)), including CNNs and RNNs.

\section{Training and Evaluation}
Correlate \( W \) with \( U \) and \( C \) to validate \( M \), and evaluate inference accuracy (\( I_a \)).

\section{Model Improvement}
Enhance \( M \) by iterative refinement of \( F \) and model parameters (\( P \)).

\section{Deployment Considerations}
Address privacy (\( P_v \)) and ethical considerations (\( E_c \)).

\section{Documentation}
Record methodologies (\( M_d \)), preprocessing (\( P_p \)), \( F \), model choices (\( M_c \)), and metrics (\( M_t \)).

\section{Study Design for User Interaction Data}
Engineer interaction scenarios (\( I_s \)) and observe contextual cues (\( C_c \)).

\section{Data Collection and Handling}
Synchronize Alexa interaction logs (\( L \)) with \( W \) timestamps (\( T \)).\\
Implement a system for recording conversations using a digital audio recorder or smartphone app, ensuring clear capture of the entire conversation content.

\section{Data Privacy and Security}
Implement anonymization (\( A_n \)) and security protocols (\( S_p \)).

\section{Alexa Skill Development for Data Logging}
Utilize Alexa Skills Kit for data logging (\( D_l \)) and implement user consent (\( U_c \)).

\section{Traffic Rate Data Collection Using Raspberry Pi}
Configure Raspberry Pi (\( R \)) for monitoring (\( M_n \)).

\section{Machine Learning-Enhanced Traffic Data Analysis}
Integrate ML techniques to correlate \( W \) with \( U \) and \( C \).

\section{Data Collection and Handling}
\begin{enumerate}
    \item \textbf{Microphone and Raspberry Pi Setup:}
          \begin{itemize}
              \item Select a high-quality USB microphone compatible with the Raspberry Pi 4 Model B. Consider options such as Blue Yeti, Audio-Technica ATR2100x-USB, Rode NT-USB, Samson Go Mic, Shure MV5, or Fifine Metal Condenser Recording Microphone based on the specific needs for sound fidelity, noise cancellation, and other features.
              \item Connect the microphone to the Raspberry Pi via a USB port. Ensure the Pi recognizes the microphone as the input device. This may involve installing drivers or configuring audio settings via the command line or Raspberry Pi configuration tools.
              \item Position the microphone in a controlled environment — a quiet space with minimal echo and background noise. Use soundproofing materials if necessary to enhance audio quality.
              \item Test the microphone setup by recording sample audio and adjusting the placement and settings for optimal sound capture.
          \end{itemize}
    \item \textbf{Automated Recording Script Implementation:}
          \begin{itemize}
              \item Develop a Python script to detect user interactions with Alexa through monitoring network traffic on the Raspberry Pi. Utilize tools like `tcpdump` or Python libraries such as `scapy` for traffic analysis.
              \item Define trigger criteria for recording based on specific patterns in WiFi traffic, such as data transfer spikes or connections to Alexa-related services.
              \item Upon detection of an Alexa interaction, use Python libraries like `pyaudio` or `sounddevice` to initiate audio recording from the connected USB microphone.
              \item Implement timestamping for each recording session to accurately match the audio data with corresponding WiFi traffic logs.
              \item Include error handling in the script to manage potential issues, ensuring continuous monitoring and recording.
              \item Define conditions for stopping the recording, such as periods of inactivity or a maximum duration limit.
              \item Automate the transfer of audio files to a secure server or cloud storage, ensuring data is encrypted and transferred securely.
              \item Configure the script to run as a service or via cron jobs for automatic startup and reliability. Implement logging for performance monitoring.
              \item Regularly test and refine the network traffic detection criteria and recording settings based on real-world data collection experiences.
              \item Document the script’s functionality, setup, dependencies, and operational procedures for future reference and modifications.
          \end{itemize}
    \item Configure the Raspberry Pi's audio settings to recognize the USB microphone as the default audio input.
    \item Perform test recordings to validate the quality of the audio capture and adjust microphone placement as necessary.
    \item Set up the script to run automatically at Raspberry Pi startup. Include error handling to manage potential issues like disconnections or storage errors.
    \item Record audio sessions in response to specific triggers, such as noticeable increases in WiFi traffic indicating interaction with Alexa.
    \item Save each audio recording with clear labels and timestamps, correlating them with the corresponding WiFi traffic data logs.
    \item Automate the transfer of these recordings to a secure storage location for further processing and analysis.
    \item Regularly test and refine the recording trigger criteria and script settings based on real-world data collection experiences.
    \item Document the setup process, script configuration, and any adjustments made during the data collection phase.
\end{enumerate}


\section{Scapy Script Implementation for Network Traffic Detection}
\begin{enumerate}
    \item \textbf{Installation and Setup of Scapy on Raspberry Pi:}
          \begin{itemize}
              \item Install Scapy using Python's package manager: \texttt{sudo pip3 install scapy}.
              \item Ensure the script is run with root permissions to capture network packets.
          \end{itemize}

    \item \textbf{Developing the Python Script:}
          \begin{verbatim}
          from scapy.all import *

          def packet_processing(packet):
              if packet.haslayer(DNS) and packet.getlayer(DNS).qr == 0:
                  print(f"DNS Request: {packet.getlayer(DNS).qd.qname}")
                  # Add logic here for Alexa-specific patterns

          sniff(iface="eth0", prn=packet_processing)
          \end{verbatim}
          \begin{itemize}
              \item Import Scapy and define a function to process each packet.
              \item Use Scapy's \texttt{sniff()} function to capture live packets, specifying the network interface and the packet processing function.
          \end{itemize}

    \item \textbf{Implementing Alexa Interaction Detection Logic:}
          \begin{itemize}
              \item In the packet processing function, add logic to detect Alexa interactions based on DNS queries, IP addresses, or specific packet patterns.
          \end{itemize}

    \item \textbf{Integration with Audio Recording:}
          \begin{itemize}
              \item Trigger audio recording based on detected Alexa interactions.
          \end{itemize}

    \item \textbf{Error Handling and Logging:}
          \begin{itemize}
              \item Implement error handling for network disruptions and logging for detected events.
          \end{itemize}

    \item \textbf{Testing and Optimization:}
          \begin{itemize}
              \item Test the script in different scenarios to ensure reliable detection and optimize packet filtering.
          \end{itemize}

    \item \textbf{Documentation:}
          \begin{itemize}
              \item Document the setup, detection logic, and configurations for the Scapy script.
          \end{itemize}
\end{enumerate}

\end{document}
